#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from seqtools.nei_gojobori_dNdS import *
import pytest


### Testing
# Ensembl 93 ENSG00000186260 ENSPANG00000020098
test_seq1 = ("ATGGATCACACAGGGGCGATAGACACCGAGGATGAAGTGGGACCTTTAGCCCATCTTGCTCCAAGTCCTCAGAGTGAAGCTGTGGCTCATGAATTCCAGGAACTCTCCTTGCAGTCCAGTCAAAACTTACCCCCTCTGAACGAAAGGAAAAATGTGCTCCAGCTGAGGCTGCAACAAAGGAGGACGAGAGAACAACTAGTGGACCAGGGCATCATGCCACCTTTGAAGAGCCCAGCGGCATTCCATGAACAGATAAAAAGCTTGGAACGAGCCAGAACTGAAAACTTTTTGAAACACAAGATTCGGAGTCGACCAGATCGTTCTGAACTTGTCAGGATGCACATTTTAGAAGAAACATTTGCAGAGCCATCCCTGCAGGCTACTCAGATGAAGTTGAAAAGAGCTCGACTAGCAGATGATCTGAATGAAAAGATTGCTCAAAGACCTGGTCCTATGGAGCTGGTAGAGAAAAACATCCTTCCTGTGGACTCCAGTGTTAAAGAAGCAATTATAGGCGTTGGGAAGGAGGACTATCCCCACACTCAGGGCGATTTCTCATTTGATGAAGACAGCAGTGACGCTTTGTCTCCGGACCAGCCTGCGAGTCAGGAGTCACAGGGGTCAGCCGCGTCCCCAAGTGAGCCAAAAGTTAGTGAATCGCCATCTCCTGTGACTACAAACACTCCAGCGCAGTTTGCTTCAGTGTCCCCAACAGTTCCTGAATTCTTGAAAACTCCTCCAACTGCAGATCAGCCTCCCCCACGGCCTGCAGCTCCTGTCCTCCCCACAAACACTGTGTCCTCAGCAAAGCCTGGCCCAGCACTGGTGAAGCAAAGCCATCCCAAGAATCCAAATGACAAACACCGTAGCAAAAAGTGCAAAGATCCCAAACCACGGGTAAAGAAGTTAAAGTACCACCAATACATTCCACCAGATCAGAAGGGTGAGAAGAATGAGCCGCAGATGGACTCTAACTACGCCCGCCTGCTCCAGCAGCAGCA"
        "GCTGTTCCTGCAACTGCAGATCCTGAGTCAGCAGAAGCAGCACTACAACTACCAGACCATCCTGCCTGCACCATTCAAGCCACTCAATGACAAAAATAGTAACAGTGGGAATTCAGCTTTGAACAATGCCACACCTAACACACCAAGACAGAATACATCTACTCCTGTGAGAAAGCCAGGACCTCTGCCTTCTAGCCTGGATGACTTAAAGGTATCAGAACTGAAGACAGAACTGAAGTTAAGGGGTCTGCCAGTGTCAGGCACCAAACCGGACCTCATTGAGCGCCTAAAACCCTACCAGGAAGTGAACAGCAGCGGCCTTGCTGCTGGGGGCATCGTGGCAGTGTCATCATCAGCCATTGTCACCAGTAACCCAGAAGTCACTGTGGCCTTGCCGGTTACAACACTACACAACACTGTGACTAGCTCAGTCTCTACTCTCAAGGCAGAATTGCCACCTACAGGAACCAGCAACGCAACCCGTGTGGAAAATGTTCATTCCCCTCTGCCCATTTCACCATCTCCCTCCGAACAGTCCAGTCTCAGTACTGATGACACAAACATGGCAGACACTTTCACCGAGATTATGACCATGATGTCGCCTTCACAGTTCTTGAGTTCATCTCCTTTGAGAATGACAAATAATGAAGACAGTCTGAGTCCCACCAGCAGCACTCTGTCAAACCTGGAACTGGATGCAGCCGAAAAGGATCGCAAGCTTCAGGAGAAAGAGAAGCAAATCGAAGAGCTGAAGAGGAAACTGGAACAAGAGCAGAAGCTCGTGGAAGTGCTGAAAATGCAACTTGAGGTTGAAAAACGAGGGCAGCAGCAGCGGCCCCTGGAAGCCCAGCCCAGTGCCCCAGGTCATTCTGTC---AAGTCAGATCAGAAGCACGGCAGCCTTGGCTCCTCCATCAAAGATGAGGCCTCACTCCCTGACTGCTCCAGCTCCAGGCAGCCCATCCCAGTAGCCAGCCACGCTGTAGGCCAGCCCGTCTCTA"
        "CAGGTGGCCAGACCCTTGTTGCCAAAAAGGCTGTAGTTATCAAGCAAGAGGTCCCTGTGGGCCAGGCAGAGCAGCAGAGTGTCGTCTCGCAGTTTTATGTGAGTTCCCAGGGACAGCCACCGCCTGCTGTTGTTGCTCAGCCCCAGGCTTTACTGACCACGCAGACTGCTCAGCTGCTGCTCCCAGTGTCCATCCAGGGCTCGAGTGTCACCTCAGTGCAACTCCCTGTAGGCAGCCTCAAACTCCAGACTTCACCACAAGCAGGAATGCAGACTCAGCCTCAGATAGCAACTGCTGCACAAATACCAACTGCTGCCTTGGCCTCAGGCTTGGCCCCAACTGTACCTCAGACACAAGACACGTTCCCGCAGCATGTGCTCAGTCAGCCTCAACAAGTCAGAAAGGTTTTCACAAACTCAGCATCATCAAATACAGTTCTTCCATATCAGAGACATCCTGCCCCAGCTGTCCAGCAGCCCTTTATCAATAAGGCCTCCAACAGTGTTCTTCAATCCAGAAATGCTCCGCTTCCATCCCTGCAAAATGGACCTAACACACCCAACAAGCCTAGTTCACCCCCGCCACCCCAGCAATTTGTCGTCCAGCACTCTCTATTTGGGAGTCCAGTCGCCAAGACAAAAGATCCCCCCCGCTATGAGGAGGCCATCAAGCAGACACGCAGCACACAGGCCCCTCTGCCAGAGATTTCCAACGCTCACAGTCAGCAGATGGATGACCTCTTTGATATCCTCATTAAGAGTGGAGAGATCTCCCTCCCCATAAAAGAAGAACCTTCTCCTATTTCCAAAATGAGACCAGTGACAGCCAGCATCACCACAATGCCAGTGAATACAGTGGTGTCCCGGCCACCACCCCAAGTCCAAATGGCACCACCTGTATCTTTAGAACCTATGGGCAGTTTATCTGCCAGCTTAGAGAACCAACTAGAAGCTTTCTTGGATGGAACTTTACCCTCAGCCAATGAAATTCCTCCACTACAA"
        "AGCAGCAGTGAAGACAGAGAGCCCTTCTCTCTGATCGAGGACCTCCAGAATGATCTGCTGAGTCACTCAGGTATGCTGGACCATTCACACTCACCCATGGAGACTTCCGAGACCCAGTTTGCTGCAGGTACTCCCTGTCTGTCTCTCGACCTGTCAGACTCAAACTTGGACAACATGGAGTGGTTGGACATTACCATGCCCAACTCCTCTTCAGGACTCACTCCTCTCAGCACCACCGCGCCGAGCATGTTCTCTGCTGACTTTCTAGACCCACAGGACCTACCGCTGCCATGGGAC")

test_seq2 = ("ATGGATCACACAGGGGCGATAGACACCGAGGATGAAGTGGGACCTTTAGCCCATCTTGCTCCGAGTCCTCAGAGTGAAGCTGTGGCTCATGAATTCCAGGAACTCTCCTTGCAGTCCAGTCAGAACTTACCCCCTCTGAACGAAAGGAAAAATGTGCTCCAGCTGAGGCTGCAACAAAGGAGGACGAGAGAACAACTAGTGGACCAGGGCATCATGCCACCTTTGAAGAGCCCAGCGGCATTCCATGAACAGATAAAAAGCTTGGAACGAGCCAGAACCGAAAACTTTTTGAAACACAAGATTCGGAGTCGACCAGATCGTTCTGAACTTGTCAGGATGCACATTTTAGAAGAAACATTTGCAGAGCCATCCCTGCAGGCTACTCAGATGAAGTTGAAAAGAGCTCGACTAGCAGATGATCTGAATGAAAAGATTGCTCAAAGACCTGGCCCTATGGAGCTGGTAGAGAAAAACATCCTTCCTGTGGACTCCAGTGTTAAAGAAGCAATTATAGGCGTTGGGAAGGAGGACTATCCCCACACTCAGGGCGATTTCTCATTTGATGAAGACAGCAGTGACGCTTTGTCTCCGGACCAGCCTGCGAGTCAGGAGTCACAGGGGTCAGCCGCGTCCCCAAGTGAGCCAAAAGTTAGTGAATCGCCATCTCCTGTGACTACAAACACTCCAGCCCAGTTTGCTTCAGTGTCCCCAACAGTTCCTGAATTCTTGAAAACTCCTCCAACTGCAGATCAGCCTCCCCCTCGGCCTGCAGCTCCTGTCCTCCCCACAAACACTGTGTCCTCAGCAAAGTCTGGCCCAGCGCTGGTGAAGCAAAGCCATCCCAAGAATCCAAATGACAAACACCGTAGCAAAAAGTGCAAAGATCCCAAACCACGGGTAAAGAAGTTAAAATACCACCAATACATTCCACCAGATCAGAAGGGTGAGAAGAACGAGCCGCAGATGGACTCCAACTACGCCCGCCTGCTCCAGCAGCAGCA"
        "GCTGTTCCTACAGCTGCAGATCCTGAGTCAGCAGAAGCAGCACTACAACTACCAGACCATCCTGCCTGCACCATTCAAGCCACTCAATGACAAAACTAGTAACAGTGGGAATTCAGCTTTGAACAATACCACACCTAACACACCAAGACAGAATACATCTGCTCCTGTGAGAAAGCCAGGACCTCTGCCTTCTAGCCTGGATGACTTAAAGGTGTCAGAACTGAAGACAGAACTGAAGTTAAGGGGTCTGCCAGTGTCAGGCACCAAACCAGACCTCATTGAGCGCCTGAAACCCTACCAGGAAGTGAACAGCAGCGGCCTTGCTGCTGGGGGCATCGTGGCAGTGTCATCGTCAGCCATTGTCACCAGTAACCCAGAAGTCACTGTGGCCTTGCCGGTTACAACACTACACAACACTGTGACTAGCCCAGTCTCTACTCTCAAGGCAGAATTGCCATCTACAGGAACCAGCAACGCAGCCCGTGTGGAAAATGTTCATTCCCCTCTGCCCATTTCACCATCTCCCTCTGAACAGTCCAGTCTCAGTACCGATGACACAAATATGGCAGACACTTTCACCGAGATTATGACCATGATGTCTCCTTCACAGTTCTTGAGTTCATCTCCTTTGAGAATGACAAATAATGAAGACAGTCTGAGTCCTACCAGCAGCACTCTGTCGAACCTGGAACTGGATGCAGCCGAGAAGGATCGCAAGCTTCAGGAGAAAGAGAAGCAAATCGAAGAACTGAAGAGGAAACTGGAACAAGAGCAGAAGCTCGTGGAAGTGCTGAAAATGCAACTTGAGGTTGAAAAACGAGGGCAGCAACAGCGGCCCCTGGAACCCCAGCCCAGTGCCCCAAGTCATTCTGTCAACAAGTCAGATCAGAAGCACAGCAGCCTTGGCTCCTCCATCAAAGACGAGGCCTCACTACCCGACTGCTCCAGCTCCAGGCAGCCCATCCCAGTAGCCAGCCACACTGTAGGCCAGCCTGTCTCTA"
        "CAGTTGGCCAGACCCTTGTTGCCAAAAAGGCTGTAGTTATCAAGCAAGAGGTCCCTGTGGCCCAGGCAGAGCAGCAGAGTGTCGTCTCGCAGTTTTATGTGAGTTCCCAGGGACAGCCACCGCCTGCTGTTGTTGCTCAGCCCCAGGCTTTACTGACCACGCAGACTGCTCAGCTCCTGCTCCCAGTGTCCATCCAGGGCTCGAGTGTCACCTCAGTGCAACTCCCTGTAGGCAGCCTCAAACTCCAGACTTCACCACAAGCAGGAATGCAGACTCAGCCTCAGATAGCAACTGCTGCACAAATACCAACTGCTGCCTTGGCCTCAGGCTTGGCCCCAGCTGTACCTCAGACACAAGACACGTTCCCACAGCATGTGCTCAGTCAGCCTCAACAAGTCAGAAAGGTTTTCACAAACTCAGCA---TCAAATACAGTTCTTCCATATCAGAGACATCCTGCTCCAGCTGTCCAGCAGCCCTTTATCAATAAGGCCTCCAACAGCGTTCTTCAATCCAGAAATGCTCCGCTTCCATCCCTGCAAAATGGACCTAACACACCCAACAAGCCTAGTTCACCCCCGCCACCCCAGCAATTTGTCGTCCAGCACTCTCTATTTGGGAGCCCAGTCGCCAAGACAAAAGATCCCCCCCGCTATGAGGAGGCCATCAAGCAAACACGCAGCACACAGGCCCCCCTGCCAGAGATTTCCAACGCACACAGTCAGCAGATGGATGACCTCTTTGATATACTCATTAAGAGTGGAGAGATCTCCCTCCCCATAAAAGAAGAACCTTCTCCTATTTCCAAAATGAGACCAGTGACAGCCAGCATCACCACAATGCCAGTGAATACAGTGGTGTCCCGGCCACCACCCCAAGTCCAAATGGCACCACCTGTATCTTTAGAACCTATGGGCAGTTTATCTGCCAGCTTAGAGAACCAACTAGAAGCTTTCTTGGATGGAACTTTACCCTCAGCCAATGAAATTGCTCCATTACAA"
        "AGCAGCAGTGAAGACAGAGAGCCCTTCTCTCTGATCGAGGACCTCCAGAATGACCTGCTGAGTCACTCAGGTATGCTGGACCATTCACACTCACCCATGGAGACTTCCGAGACCCAGTTTGCTGCAGGTACTCCCTGTCTGTCTCTCGACCTGTCAGACTCAAACTTGGATAACATGGAGTGGTTGGACATTACCATGCCCAACTCCTCTTCAGGACTCACTCCTCTCAGCACCACCACCCCAAGCATGTTCTCCGCCGACTTTCTAGACCCACAGGACCTACCACTACCATGGGAC")

def test_vs_human():
    assert round(frac_synonymous('TTT', 2), 2) == 0.33
    assert round(frac_synonymous('TTT', 1), 2) == 0
    assert round(frac_synonymous('TTT', 0), 2) == 0
    assert round(frac_synonymous('TGT', 2), 2) == 0.5
    assert round(frac_synonymous('TGT', 1), 2) == 0
    assert round(frac_synonymous('TGT', 0), 2) == 0
    assert nei_gojobori('TTT', 'GTA') == (3, 1/3, 1, 1.5, 0.5), nei_gojobori('TTT', 'GTA')
    assert nei_gojobori('TTG', 'AGA') == (3, 2/3, 1/2+1/3, 9/4, 3/4), nei_gojobori('TTG', 'AGA')


@pytest.mark.skip(reason="Don't know who has a bug or if it is a rounding error.")
def test_vs_realseq_yn00():
    result = nei_gojobori(test_seq1, test_seq2)
    L, S1, S2, Nobs, Sobs = result
    mean_S = (S1+S2)/2
    pN, pS = Nobs / (L - mean_S), Sobs / mean_S
    dN, dS = dNdS(*result)
    # Values given by 'codeml'
    assert round(dN, 4) == 0.0065, "pN=%g, dN=%g" % (pN, dN)
    assert round(dS, 4) == 0.0607, "pS=%g, dS=%g" % (pS, dS)


class Test_vsYN00:
    tmploc, tmpctl, tmpout = set_tmp_files_yn00('XXX', 'XXX')


def checker_yn00(codon1, codon2):
    def check(self):
        with open(self.tmpctl.replace('.ctl', '.phy'), 'w') as tmpalfile:
            write_phy(tmpalfile, codon1, codon2)
        dN, dS = dNdS(*nei_gojobori(codon1, codon2))
        _, ref_dN, ref_dS = call_nei_gojobori_yn00(self.tmpctl, self.tmpout)
        assert round(dN, 5) == round(ref_dN, 5), "dN=%s ref_dN=%s" % (dN, ref_dN)
        assert round(dS, 5) == round(ref_dS, 5), "dS=%s ref_dS=%s" % (dS, ref_dS)
    return check

codons = sorted(genetic_code)
# Add all possible tests to the test case.
for c1 in codons:
    for c2 in codons:
        setattr(Test_vsYN00, 'test_%s_%s' %(c1, c2),
                pytest.mark.skip(reason="PAML seems off at the .01 precision.")(checker_yn00(c1, c2)))

class Test_vsMega:
    dataset = 'HLA-3Seq'
    seqs = {'A-2301': "GGCTCCCACTCCATGAGGTATTTCTCCACATCCGTGTCCCGGCCCGGCCGCGGGGAGCCCCGCTTCATCGCCGTGGGCTACGTGGACGACACGCAGTTCGTGCGGTTCGACAGCGACGCCGCGAGCCAGAGGATGGAGCCGCGGGCGCCGTGGATAGAGCAGGAGGGGCCGGAGTATTGGGACGAGGAGACAGGGAAAGTGAAGGCCCACTCACAGACTGACCGAGAGAACCTGCGGATCGCGCTCCGCTACTACAACCAGAGCGAGGCCGGTTCTCACACCCTCCAGATGATGTTTGGCTGCGACGTGGGGTCGGACGGGCGCTTCCTCCGCGGGTACCACCAGTACGCCTACGACGGCAAGGATTACATCGCCCTGAAAGAGGACCTGCGCTCTTGGACCGCGGCGGACATGGCGGCTCAGATCACCCAGCGCAAGTGGGAGGCGGCCCGTGTGGCGGAGCAGTTGAGAGCCTACCTGGAGGGCACGTGCGTGGACGGGCTCCGCAGATACCTGGAGAACGGGAAGGAGACGCTGCAGCGCACGGACCCCCCCAAGACACATATGACCCACCACCCCATCTCTGACCATGAGGCCACTCTGAGATGCTGGGCCCTGGGCTTCTACCCTGCGGAGATCACACTGACCTGGCAGCGGGATGGGGAGGACCAGACCCAGGACACGGAGCTTGTGGAGACCAGGCCTGCAGGGGATGGAACCTTCCAGAAGTGGGCAGCTGTGGTGGTACCTTCTGGAGAGGAGCAGAGATACACCTGCCATGTGCAGCATGAGGGTCTGCCCAAGCCCCTCACCCTGAGATGG",
                 'A-2501': "GGCTCCCACTCCATGAGGTATTTCTACACCTCCGTGTCCCGGCCCGGCCGCGGGGAGCCCCGCTTCATCGCCGTGGGCTACGTGGACGACACGCAGTTCGTGCGGTTCGACAGCGACGCCGCGAGCCAGAGGATGGAGCCGCGGGCGCCGTGGATAGAGCAGGAGGGGCCGGAGTATTGGGACCGGAACACACGGAATGTGAAGGCCCACTCACAGACTGACCGAGAGAGCCTGCGGATCGCGCTCCGCTACTACAACCAGAGCGAGGACGGTTCTCACACCATCCAGAGGATGTATGGCTGCGACGTGGGGCCGGACGGGCGCTTCCTCCGCGGGTACCAGCAGGACGCTTACGACGGCAAGGATTACATCGCCCTGAACGAGGACCTGCGCTCTTGGACCGCGGCGGACATGGCGGCTCAGATCACCCAGCGCAAGTGGGAGACGGCCCATGAGGCGGAGCAGTGGAGAGCCTACCTGGAGGGCCGGTGCGTGGAGTGGCTCCGCAGATACCTGGAGAACGGGAAGGAGACGCTGCAGCGCACGGACGCCCCCAAGACGCATATGACTCACCACGCTGTCTCTGACCATGAGGCCACCCTGAGGTGCTGGGCCCTGAGCTTCTACCCTGCGGAGATCACACTGACCTGGCAGCGGGATGGGGAGGACCAGACCCAGGACACGGAGCTCGTGGAGACCAGGCCTGCAGGGGATGGGACCTTCCAGAAGTGGGCGTCTGTGGTGGTGCCTTCTGGACAGGAGCAGAGATACACCTGCCATGTGCAGCATGAGGGTCTGCCCAAGCCCCTCACCCTGAGATGG",
                 'A-3301': "GGCTCCCACTCCATGAGGTATTTCACCACATCCGTGTCCCGGCCCGGCCGCGGGGAGCCCCGCTTCATCGCCGTGGGCTACGTGGACGACACGCAGTTCGTGCGGTTCGACAGCGACGCCGCGAGCCAGAGGATGGAGCCGCGGGCGCCGTGGATAGAGCAGGAGGGGCCGGAGTATTGGGACCGGAACACACGGAATGTGAAGGCCCACTCACAGATTGACCGAGTGGACCTGGGGACCCTGCGCGGCTACTACAACCAGAGCGAGGCCGGTTCTCACACCATCCAGATGATGTATGGCTGCGACGTGGGGTCGGACGGGCGCTTCCTCCGCGGGTACCAGCAGGACGCCTACGACGGCAAGGATTACATCGCCTTGAACGAGGACCTGCGCTCTTGGACCGCGGCGGACATGGCGGCTCAGATCACCCAGCGCAAGTGGGAGGCGGCCCGTGTGGCGGAGCAGTTGAGAGCCTACCTGGAGGGCACGTGCGTGGAGTGGCTCCGCAGACACCTGGAGAACGGGAAGGAGACGCTGCAGCGCACGGACCCCCCCAGGACGCATATGACTCACCACGCTGTCTCTGACCATGAGGCCACCCTGAGGTGCTGGGCCCTGAGCTTCTACCCTGCGGAGATCACACTGACCTGGCAGCGGGATGGGGAGGACCAGACCCAGGACACGGAGCTCGTGGAGACCAGGCCTGCAGGGGATGGAACCTTCCAGAAGTGGGCGTCTGTGGTGGTGCCTTCTGGACAGGAGCAGAGATACACCTGCCATGTGCAGCATGAGGGTCTCCCCAAGCCCCTCACCCTGAGATGG"}
    # Below results were obtained with MEGAX (pairwise sequence comparisons)
    # Using the 'selection > Z test'
    NGprop_dN_minus_dS_normalised = {'A-2301': {'A-2501': -0.598003, 'A-3301': -0.147328},
                                     'A-2501': {'A-3301': 0.681077}}
    NGprop_diff_variance = {}
    NGprop_pZ = {'A-2301': {'A-2501': 0.550965, 'A-3301': 0.883120},
                 'A-2501': {'A-3301': 0.497135}}
    NGJC_dN_minus_dS_normalised = {'A-2301': {'A-2501': -0.595142, 'A-3301': -0.147179},
                          'A-2501': {'A-3301': 0.682916}}
    NGJC_diff_variance = {}
    NGJC_pZ = {'A-2301': {'A-2501': 0.552869, 'A-3301': 0.883237},
               'A-2501': {'A-3301': 0.495976}}

    # Using the 'distance > synonymous'
    NGnb = {'dN': {'A-2301': {'A-2501': 29.5,
                              'A-3301': 30},
                   'A-2501': {'A-3301': 23.5}},
            'dS': {'A-2301': {'A-2501': 11.5,
                              'A-3301': 10},
                   'A-2501': {'A-3301': 5.5}}}
    NGprop = {'dN': {'A-2301': {'A-2501': 0.047194,
                                'A-3301': 0.048032},
                     'A-2501': {'A-3301': 0.037560}},
              'dS': {'A-2301': {'A-2501': 0.058400,
                                'A-3301': 0.050654},
                     'A-2501': {'A-3301': 0.028014}}}
    NGJC = {'dN': {'A-2301': {'A-2501': 0.048744,
                              'A-3301': 0.049639},
                   'A-2501': {'A-3301': 0.038533}},
            'dS': {'A-2301': {'A-2501': 0.060799,
                              'A-3301': 0.052446},
                   'A-2501': {'A-3301': 0.028550}}}
    # results with YN00:
    NGJC_dN_minus_dS_YN00 = {'A-2301': {'A-2501': 0.0486-0.0615, 'A-3301': 0.0495-0.0529},
                                  'A-2501': {'A-3301': 0.0384-0.0288}}

    # I can't test this without knowing the analytical variance computed in MEGA
    def test_NG_prop_1vs2(self):
        s1, s2 = 'A-2301', 'A-3301'
        prec = 5
        pN, pS = pNpS(*nei_gojobori(self.seqs[s1], self.seqs[s2]))
        assert round(pN, prec) == round(self.NGprop['dN'][s1][s2], prec), pN
        assert round(pS, prec) == round(self.NGprop['dS'][s1][s2], prec), pS
    def test_NG_prop_1vs3(self):
        s1, s2 = 'A-2301', 'A-3301'
        prec = 5
        pN, pS = pNpS(*nei_gojobori(self.seqs[s1], self.seqs[s2]))
        assert round(pN, prec) == round(self.NGprop['dN'][s1][s2], prec), pN
        assert round(pS, prec) == round(self.NGprop['dS'][s1][s2], prec), pS
    def test_NG_prop_2vs3(self):
        s1, s2 = 'A-2501', 'A-3301'
        prec = 5
        pN, pS = pNpS(*nei_gojobori(self.seqs[s1], self.seqs[s2]))
        assert round(pN, prec) == round(self.NGprop['dN'][s1][s2], prec), pN
        assert round(pS, prec) == round(self.NGprop['dS'][s1][s2], prec), pS

    def test_NG_JC_1vs2(self):
        s1, s2 = 'A-2301', 'A-2501'
        prec = 5
        dN, dS = dNdS(*nei_gojobori(self.seqs[s1], self.seqs[s2]))
        assert round(dN, prec) == round(self.NGJC['dN'][s1][s2], prec), dN
        assert round(dS, prec) == round(self.NGJC['dS'][s1][s2], prec), dS
    def test_NG_JC_1vs3(self):
        s1, s2 = 'A-2301', 'A-3301'
        prec = 5
        dN, dS = dNdS(*nei_gojobori(self.seqs[s1], self.seqs[s2]))
        assert round(dN, prec) == round(self.NGJC['dN'][s1][s2], prec), dN
        assert round(dS, prec) == round(self.NGJC['dS'][s1][s2], prec), dS
    def test_NG_JC_2vs3(self):
        s1, s2 = 'A-2501', 'A-3301'
        prec = 5
        dN, dS = dNdS(*nei_gojobori(self.seqs[s1], self.seqs[s2]))
        assert round(dN, prec) == round(self.NGJC['dN'][s1][s2], prec), dN
        assert round(dS, prec) == round(self.NGJC['dS'][s1][s2], prec), dS

    def test_NG_yn00_1vs2(self):
        s1, s2 = 'A-2301', 'A-3301'
        prec = 5
        _, dN, dS = nei_gojobori_yn00(self.seqs[s1], self.seqs[s2])
        assert round(dN - dS, prec) == round(self.NGJC_dN_minus_dS_YN00[s1][s2], prec), dN-dS
    def test_NG_yn00_1vs3(self):
        s1, s2 = 'A-2301', 'A-3301'
        prec = 5
        _, dN, dS = nei_gojobori_yn00(self.seqs[s1], self.seqs[s2])
        assert round(dN - dS, prec) == round(self.NGJC_dN_minus_dS_YN00[s1][s2], prec), dN-dS
    def test_NG_yn00_2vs3(self):
        s1, s2 = 'A-2501', 'A-3301'
        prec = 5
        _, dN, dS = nei_gojobori_yn00(self.seqs[s1], self.seqs[s2])
        assert round(dN - dS, prec) == round(self.NGJC_dN_minus_dS_YN00[s1][s2], prec), dN-dS

def runtests():
    test_vs_human()
    test_vs_realseq_yn00()


if __name__ == '__main__':
    runtests()

