
import sys
import re
from glob import iglob

import os; print("'realign' working dir: %s; snakefile dir: %s" % (os.getcwd(), workflow.basedir), file=sys.stderr) 

SUBTREEDIR = config.setdefault('subtreedir', 'subtreesGoodQualO2')
ANCESTOR = config.setdefault('ancestor', 'Simiiformes')
OUTPUTLIST = config.get('outputlist')
GENETREE = config.get('genetree', 'ENSGT*')  # For use with `glob`


LEADING_DOTDIR = re.compile(r'^\./')

#wildcard_constraints:
#    basedir='(\./|.+/)'

def generate_outputs(wildcards):
    if OUTPUTLIST:
        print('Reading output list from file...', file=sys.stderr)
        with open(OUTPUTLIST) as s:
            outputs = [LEADING_DOTDIR.sub('', line.rstrip()) for line in s]
    else:
        print('Globbing subtree alignment files...', file=sys.stderr)
        outputs = [f[:-9] + '_fsa.OK' for f in iglob('{genetree}/{subtreedir}/{ancestor}{genetree}*_genes.fa'.format(**config))]

    print(('%d Outputs:\n' % len(outputs)) + '\n'.join(outputs[:5]) + '\n...',
          file=sys.stderr)
    return outputs



# outdir would typically be "realigned"
rule all:
    input: generate_outputs

#subworkflow codeml_subtrees:
#    workdir: os.getcwd()  # != "." which is `workflow.basedir` (the snakefile directory)
#    snakefile: "../genchron/codeml_subtrees.snake"  # Circular import..

#include: "../genchron/codeml_subtrees.snake"

# Optional, if _genes.fa files are not produced. Rules from codeml_subtrees.snake.
rule list_tree_labels:
	input: "{genetree}/{subtreedir}/{ancestorgenetreesuffix}.nwk"
	output: temp("{genetree}/{subtreedir}/{ancestorgenetreesuffix}_labels.txt")
	# the perl part removes the last newline of stdin. (Otherwise
	# evosite3d/extract_sequences.py fails if there are no labels)
	shell: "nw_labels -I '{input}' | perl -pe 'chomp if eof' > '{output}'"

rule rm_seq_not_in_tree:
	input:
		labels=rules.list_tree_labels.output,  #"{genetree}_labels.txt",
		al    ="{genetree}/{genetree}_genes.fa"
	output: "{genetree}/{subtreedir}/{ancestorgenetreesuffix}_genes.fa"
	shell:
		"~glouvel/scripts/evosite3d/extract_sequences.py '{input.labels}' "\
		"'{input.al}' > '{output}'"


rule translate:
    #input: codeml_subtrees("{basedir}/{subtree}_genes.fa")
    input: "{basedir}/{subtree}_genes.fa"
    output: "{basedir}/realign/{subtree}_prot.fa"
    run:
        from Bio import AlignIO
        from Bio.Align import MultipleSeqAlignment
        from Bio.Alphabet import IUPAC
        al = AlignIO.read(input[0], 'fasta', alphabet=IUPAC.ambiguous_dna)
        AlignIO.write(MultipleSeqAlignment([seq.translate(gap='-',
                                                          id=True,
                                                          name=True,
                                                          description=True)
                                            for seq in al]),
                      output[0], 'fasta')
    #shell:
    #    "treebest trans {input} > {output}"


rule realign:
    input: "{basedir}/realign/{subtree}_prot.fa"
    output: "{basedir}/realign/{subtree}_protfsa.fa"
    benchmark: "{basedir}/realign/{subtree}_fsa-benchmark.tsv"
    shell:
        "fsa {input} > {output}"

rule backtrans:
    input:
        al="{basedir}/realign/{subtree}_protfsa.fa",
        dna="{basedir}/{subtree}_genes.fa"
    output: "{basedir}/realign/{subtree}_fsa.fa"
    shell:
        "~glouvel/scripts/seqtools/backtransX.py {input.al} {input.dna} {output}"

## Alternative rule to generate the files in the ./ directory
rule backtrans_samedir:
    input:
        al="{basedir}/realign/{subtree}_protfsa.fa",
        dna="{basedir}/{subtree}_genes.fa"
    output: "{basedir}/{subtree}_fsa.fa"
    shell:
        "{workflow.basedir}/backtransX.py {input.al} {input.dna} {output}"
        #"treebest backtrans {input.al} {input.dna} > {output}"

#rule backtrans_treebest:
#    input:
#        al="{basedir}/realign/{subtree}_protfsa.fa",
#        dna="{basedir}/{subtree}_genes.fa"
#    output: "{basedir}/realign/{subtree}_fsa.fa"
#    shell:
#        "treebest backtrans {input.al} {input.dna} > {output}"

#rule backtrans_emboss:
#    input:
#        al="{basedir}/realign/{subtree}_protfsa.fa",
#        dna="{basedir}/{subtree}_genes.fa"
#    output: "{basedir}/realign/{subtree}_fsa.fa"
#    shell:
#        "backtranseq"

rule check_output_basedir:
    # Check if all sequences were kept.
    input:
        orig='{basedir}/{subtree}_genes.fa',
        new='{basedir}/{subtree}_fsa.fa'
    output: touch('{basedir}/{subtree}_fsa.OK')
    shell:
        "diff -q <(grep '^>' {input.orig} | sort) <(grep '^>' {input.new} | sort)"

