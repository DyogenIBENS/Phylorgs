#configfile: "codeml1-300.snake.config.yaml"
import re
import os.path
from glob import iglob

ruleorder: codeml_condor > codeml

wildcard_constraints:
	ancestorgenetreesuffix='[A-Z][a-z]+ENSGT00\d+[.`a-zA-Z]*'
#	genetree = 'ENSGT\d+',#,
#	suffix = '[a-zA-Z.]+'
#	#bz2_or_not = "|\.bz2"

GENETREES = config.setdefault('genetrees', ['ENSGT00850000133333'])
ANCESTORS = config.setdefault('ancestors',
                              ['Afrotheria',
                               'Carnivora',
                               'Cetartiodactyla',
                               'Chiroptera',
                               'Euarchontoglires',
                               'Insectivora',
                               'Lagomorpha',
                               'Marsupialia',
                               'Neognathae',
                               'Rodentia',
                               'Simiiformes',
                               'Strepsirrhini',
                               'Xenarthra'])

def get_subtrees(wildcards):
	pattern = '{genetree}/subtrees/{ancestor}{genetree}*.nwk'
	return iglob(pattern.format(**vars(wildcards)))

def get_ctl_pre(wildcards):
	return [f.replace('.nwk', '.ctl') for f in get_subtrees(wildcards)]

def get_subtrees_ancestor(wildcards):
	patterns = ['{0}/subtrees/{ancestor}{0}*.nwk'.format(genetree, \
														 **vars(wildcards)) \
				for genetree in GENETREES]
	#discarded = 0
	#discarded_codeml = 0
	for pattern in patterns:
		stricter_pattern = re.compile(pattern.replace('*', '([.`a-zA-Z])*'))
		for f in iglob(pattern):
			if stricter_pattern.match(f):
				yield f
			#else:
			#	discarded += 1
			#	if re.search(r'_codeml', f):
			#		discarded_codeml += 1
			#	else:
			#		print(f, end=',', file=sys.stderr)
	#print("Discarded: %d (codeml: %d). " % (discarded, discarded_codeml),
	#	  end=' ', file=sys.stderr)

def get_ctl_ancestor_pre(wildcards):
	print("get_ctl_ancestor_pre...", end=' ', file=sys.stderr)
	# Do not yield if there is a codeml result file already
	#r = [f.replace('.nwk', '.ctl') for f in get_subtrees_ancestor(wildcards) \
	#		if not os.path.isfile(f.replace('.nwk', '.mlc'))]
	#print("Done (%d files)." % len(r), file=sys.stderr)
	r = []
	for count, f in enumerate(get_subtrees_ancestor(wildcards), start=1):
		if not os.path.isfile(f.replace('.nwk', '.mlc')):
			r.append(f.replace('.nwk', '.ctl'))
	todo = len(r)
	print("To include: %d ; already done: %d files." % (todo, count-todo),
			file=sys.stderr)
	return r

def get_ctl_ancestor(wildcards):
	patterns = ['{0}/subtrees/{ancestor}{0}*.ctl'.format(genetree, \
														 **vars(wildcards)) \
				for genetree in GENETREES]
	found = []
	for pattern in patterns:
		found += glob(pattern)
	return found

#rule all:
#	input: "codeml.condor.txt"

# prepare multiple alignment. Once for each gene tree.
rule prot2gene_in_align:
	input:  "{genetree}.fa.bz2"
	output: "{genetree}/{genetree}_genes.fa"
	shell:
		"~glouvel/scripts/prot2gene.py"
		" -o '{{0}}/{{0}}_genes.fa'"
		" /kingdoms/dyogen/workspace2/workspace2/alouis/GENOMICUS_SVN/data85/genes/gtp/gtp.%s.list.bz2"
		" {input}"
		# Single quotes are important for shell escaping the braces!

# prepare trees
rule get_tree:
	input: "/users/ldog/alouis/ws2/GENOMICUS_SVN/data85/trees/0.35/tree.4F.cut.bz2"
	output: "{genetree}/{genetree}.nwk"
	shell:
		"~glouvel/install/python2.7/localrepo/ToolsDyogen/treeTools/ALL.extractOneGeneTree.py \
    -field=family_name \
    -toNewick=True \
    -withAncSpeciesNames=True \
    {input} \
    {wildcards.genetree} \
    > {output}"


#rule prune2family:
#	input: rules.get_tree.output
#	output: expand("{{genetree}}/subtrees/")
#	shell:
#		"~glouvel/scripts/codeml/prune2family.py -o #TODO"


# The actual starting rule
rule rm_inner_node_labels:
	# /!\ Cyclic rule!
	input: "{genetree}/subtrees/{ancestorgenetreesuffix}.nwk"
	output: "{genetree}/subtrees/{ancestorgenetreesuffix}_codeml.nwk"
	shell:
		r"sed 's/)[a-zA-Z0-9._]\+\(:\|;\)/)\1/g' '{input}' > '{output}'"

rule list_tree_labels:
	input: rules.rm_inner_node_labels.output # "{genetree}_codeml.pruned.nwk",
	output: temp("{genetree}/subtrees/{ancestorgenetreesuffix}_labels.txt")
	# the perl part removes the last newline of stdin. (Otherwise
	# evosite3d/extract_sequences.py fails if there are no labels)
	shell: "nw_labels -I '{input}' | perl -pe 'chomp if eof' > '{output}'"

rule rm_seq_not_in_tree:
	input:
		labels=rules.list_tree_labels.output,  #"{genetree}_labels.txt",
		al    =rules.prot2gene_in_align.output #"{genetree}_genes.fa"
	output: "{genetree}/subtrees/{ancestorgenetreesuffix}_genes.fa"
	shell:
		"~glouvel/scripts/evosite3d/extract_sequences.py '{input.labels}' "\
		"'{input.al}' > '{output}'"

rule fasta2phylip:
	input:  rules.rm_seq_not_in_tree.output #"{ancestorgenetreesuffix}_genes.fa"
	output: "{genetree}/subtrees/{ancestorgenetreesuffix}_genes.phy"
	shell:
		"/users/ldog/glouvel/scripts/evosite3d/convert_fasta2phylip.py "\
		"'{input}' '{output}'"

rule make_ctl:
	input:
		ctl="base0.ctl",
		phy=rules.fasta2phylip.output,
		tree=rules.rm_inner_node_labels.output
	output: "{genetree}/subtrees/{ancestorgenetreesuffix}.ctl"
	run:
		with open(output[0], 'w') as out:
			out.write(
				("seqfile  = subtrees/{ancestorgenetreesuffix}_genes.phy\n"
				 "treefile = subtrees/{ancestorgenetreesuffix}_codeml.nwk\n"
				 "outfile  = subtrees/{ancestorgenetreesuffix}.mlc\n").format(**vars(wildcards)))
			with open(input.ctl) as IN:
				out.write(IN.read())

rule codeml:
	input:
		ctl =rules.make_ctl.output,
		seq =rules.fasta2phylip.output,
		tree="{genetree}/subtrees/{ancestorgenetreesuffix}.nwk"
	output:
		mlc  ="{genetree}/subtrees/{ancestorgenetreesuffix}.mlc",
		dN   ="{genetree}/subtrees/{ancestorgenetreesuffix}_2NG.dN",
		dS   ="{genetree}/subtrees/{ancestorgenetreesuffix}_2NG.dS",
		t    ="{genetree}/subtrees/{ancestorgenetreesuffix}_2NG.t",
		ffold="{genetree}/subtrees/{ancestorgenetreesuffix}_4fold.nuc",
		lnf  ="{genetree}/subtrees/{ancestorgenetreesuffix}_lnf",
		rst  ="{genetree}/subtrees/{ancestorgenetreesuffix}_rst",
		rst1 ="{genetree}/subtrees/{ancestorgenetreesuffix}_rst1",
		rub  ="{genetree}/subtrees/{ancestorgenetreesuffix}_rub"
	log: "{genetree}/subtrees/{ancestorgenetreesuffix}.log"
	shell:
		"bash ~glouvel/scripts/codeml/run_codeml_separatedir.sh '{input.ctl}'"

#rule allocate_codeml_memory:
#	input: rules.fasta2phylip.output
#	output: "{genetree}/subtrees/{ancestor}{genetree}.condor.memory.txt"
#		#temp("{genetree}/{genetree}.condor.memory.txt")
#	shell: "~glouvel/scripts/codeml/allocate_codeml_memory.py {input} > {output}"
		
rule condor_descript:
	#input: rules.allocate_codeml_memory.output
	output: "{genetree}/subtrees/{ancestorgenetreesuffix}.condor.txt"
	params: ctl="{genetree}/subtrees/{ancestorgenetreesuffix}.ctl"
	shell:
		'/users/ldog/glouvel/scripts/htcondor_descript/condor_descript.py'
		' {output}'
		' /users/ldog/glouvel/scripts/codeml/run_codeml_separatedir.sh'
		' -a {params.ctl}'
		' -cl \'glouvel:34\''
		' -m 100M'

# Check that all the .ctl corresponding to the .nwk have been produced.
#rule all_ready_for_codeml:
	

rule condor_descript_prepare:
	#input: expand('{genetree}/subtrees/all_ready_for_codeml', genetree=GENETREES)
	#params: get_ctl_ancestor # _pre required otherwise it won't compute
							# the .ctl if they don't exist yet.
			#expand('{genetree}/subtrees/{{ancestor}}{genetree}*.nwk',
			#	  genetree=GENETREES)
	input: get_ctl_ancestor_pre
	output: "{basename}_{ancestor}.condor.arguments.txt"
	run:
		with open(output[0], 'w') as OUT:
			OUT.write("template\targuments\n")
			for ctlfile in input:
				base, _ = os.path.splitext(os.path.basename(ctlfile))
				tmpl = 'condor_logs/%s' % base
				OUT.write('%s\t-q %s\n' % (tmpl, ctlfile))


# It's better to submit all jobs through one single file.
# However in that case don't forget to specify concurrency_limits
rule condor_descript_all:
	input: rules.condor_descript_prepare.output
	output: "{basename}_{ancestor}.condor.txt"
	shell:
		'/users/ldog/glouvel/scripts/htcondor_descript/condor_descript.py'
		' {output}'
		' /users/ldog/glouvel/scripts/codeml/run_codeml_separatedir.sh'
		' --fromfile {input}'
		' -cl \'glouvel:34\''
		' -m "100M"'

rule codeml_condor_all:
	input: rules.condor_descript_all.output
	output: "{basename}.condor.jobsubmitted.txt"
	shell: "condor_submit {input} | tee {output}"

rule codeml_condor:
	input:
		desc=rules.condor_descript.output,
		ctl =rules.make_ctl.output,
		seq =rules.fasta2phylip.output,
		tree="{genetree}/subtrees/{ancestorgenetreesuffix}.nwk"
	output: "{genetree}/{genetree}.condor.jobsubmitted.txt"
	shell:
		"condor_submit {input.desc} | tee {output}"

