#configfile: "codeml1-300.snake.config.yaml"

ruleorder: codeml_condor > codeml

wildcard_constraints:
	genetree = 'ENSGT\d+'#,
	#bz2_or_not = "|\.bz2"
	suffix = '[a-zA-Z.]+'

GENETREES = config.setdefault('genetrees', ['ENSGT00850000133333'])
ANCESTORS = config.setdefault('ancestors',
                              ['Afrotheria',
                               'Carnivora',
                               'Cetartiodactyla',
                               'Chiroptera',
                               'Euarchontoglires',
                               'Insectivora',
                               'Lagomorpha',
                               'Marsupialia',
                               'Neognathae',
                               'Rodentia',
                               'Simiiformes',
                               'Strepsirrhini',
                               'Xenarthra'])

rule all:
	input: "codeml.condor.txt"

rule list_all_genetrees:
	input: "/users/ldog/alouis/ws2/GENOMICUS_SVN/data{config[EnsemblVersion]}/trees/0.35/tree.4F.cut.bz2"
	output: "all_gene_trees.txt"
	shell: "bzcat {input} | ~glouvel/scripts/iterate_genefamilies.pl > {output}"


# prepare multiple alignment
rule prot2gene_in_align:
	input:  "{genetree}.fa.bz2"
	output: "{genetree}/{genetree}_genes.fa"
	shell:
		"~glouvel/scripts/prot2gene.py"
		" -o '{{0}}/{{0}}_genes.fa'"
		" /kingdoms/dyogen/workspace2/workspace2/alouis/GENOMICUS_SVN/data85/genes/gtp/gtp.%s.list.bz2"
		" {input}"
		# Single quotes are important for shell escaping the braces!

# prepare trees
rule get_tree:
	input: "/users/ldog/alouis/ws2/GENOMICUS_SVN/data85/trees/0.35/tree.4F.cut.bz2"
	output: "{genetree}/{genetree}.nwk"
	shell:
		"~glouvel/install/python2.7/localrepo/ToolsDyogen/treeTools/ALL.extractOneGeneTree.py \
    -field=family_name \
    -toNewick=True \
    -withAncSpeciesNames=True \
    {input} \
    {wildcards.genetree} \
    > {output}"


rule prune2family:
	input: rules.get_tree.output
	output: expand("{{genetree}}/subtrees/")
	shell:
		"~glouvel/scripts/codeml/prune2family.py -o #TODO"


# The actual starting rule
rule rm_inner_node_labels:
	input: "{genetree}/subtrees/{ancestor}{genetree}.{suffix}.nwk"
	output: "{genetree}/subtrees/{ancestor}{genetree}.{suffix}_codeml.nwk"
	shell:
		r"sed 's/)[a-zA-Z0-9._]\+\(:\|;\)/)\1/g' {input} > {output}"

rule list_tree_labels:
	input: rules.rm_inner_node_labels.output # "{genetree}_codeml.pruned.nwk",
	output: temp("{genetree}/subtrees/{ancestor}{genetree}.{suffix}_labels.txt")
	# the perl part removes the last newline of stdin. (Otherwise
	# evosite3d/extract_sequences.py fails if there are no labels)
	shell: "nw_labels -I {input} | perl -pe 'chomp if eof' > {output}"

rule rm_seq_not_in_tree:
	input:
		labels=rules.list_tree_labels.output,  #"{genetree}_labels.txt",
		al    =rules.prot2gene_in_align.output #"{genetree}_genes.fa"
	output: "{genetree}/subtrees/{ancestor}{genetree}.{suffix}_genes.fa"
	shell:
		"~glouvel/scripts/evosite3d/extract_sequences.py {input.labels} {input.al} > {output}"

rule fasta2phylip:
	input:  rules.rm_seq_not_in_tree.output #"{genetree}_genes.filtered.fa"
	output: "{genetree}/subtrees/{ancestor}{genetree}.{suffix}_genes.phy"
	shell:
		"/users/ldog/glouvel/scripts/evosite3d/convert_fasta2phylip.py {input} {output}"

rule make_ctl:
	input: "base0.ctl"
	output: "{genetree}/subtrees/{ancestor}{genetree}.{suffix}.ctl"
	run:
		with open(output[0], 'w') as out:
			out.write(
				("seqfile  = subtrees/{ancestor}{genetree}.{suffix}_genes.phy\n"
				 "treefile = subtrees/{ancestor}{genetree}.{suffix}_codeml.nwk\n"
				 "outfile  = subtrees/{ancestor}{genetree}.{suffix}.mlc\n").format(**vars(wildcards)))
			with open(input[0]) as IN:
				out.write(IN.read())

rule codeml:
	input:
		ctl =rules.make_ctl.output,           #"{genetree}.ctl",
		seq =rules.fasta2phylip.output,       #"{genetree}_genes.filtered.phy",
		tree=rules.rm_leaves_not_in_al.output #"{genetree}_codeml.pruned.nwk"
	output:
		mlc  ="{genetree}/subtrees/{ancestor}{genetree}.{suffix}.mlc",
		dN   ="{genetree}/subtrees/{ancestor}{genetree}.{suffix}_2NG.dN",
		dS   ="{genetree}/subtrees/{ancestor}{genetree}.{suffix}_2NG.dS",
		t    ="{genetree}/subtrees/{ancestor}{genetree}.{suffix}_2NG.t",
		ffold="{genetree}/subtrees/{ancestor}{genetree}.{suffix}_4fold.nuc",
		lnf  ="{genetree}/subtrees/{ancestor}{genetree}.{suffix}_lnf",
		rst  ="{genetree}/subtrees/{ancestor}{genetree}.{suffix}_rst",
		rst1 ="{genetree}/subtrees/{ancestor}{genetree}.{suffix}_rst1",
		rub  ="{genetree}/subtrees/{ancestor}{genetree}.{suffix}_rub"
	log: "{genetree}/subtrees/{ancestor}{genetree}.{suffix}.log"
	shell:
		"bash ~glouvel/scripts/codeml/run_codeml_separatedir.sh {input.ctl}"

#rule allocate_codeml_memory:
#	input: rules.fasta2phylip.output
#	output: "{genetree}/subtrees/{ancestor}{genetree}.condor.memory.txt"
#		#temp("{genetree}/{genetree}.condor.memory.txt")
#	shell: "~glouvel/scripts/codeml/allocate_codeml_memory.py {input} > {output}"
		
rule condor_descript:
	#input: rules.allocate_codeml_memory.output
	output: "{genetree}/subtrees/{ancestor}{genetree}.{suffix}.condor.txt"
	params: ctl="{genetree}/subtrees/{ancestor}{genetree}.{suffix}.ctl"
	shell:
		'/users/ldog/glouvel/scripts/htcondor_descript/condor_descript.py'
		' {output}'
		' /users/ldog/glouvel/scripts/codeml/run_codeml_separatedir.sh'
		' -a {params.ctl}'
		' -cl \'glouvel:34\''
		' -m "`cat {input}`"'

#rule condor_descript_old:
#	input: rules.fasta2phylip.output
#	output: "{genetree}/{genetree}.condor.txt"
#	params: ctl="{genetree}/{genetree}.ctl"
#	shell:
#		'/users/ldog/glouvel/scripts/htcondor_descript/condor_descript.py'
#		' {output}'
#		' /users/ldog/glouvel/scripts/codeml/run_codeml_separatedir.sh'
#		' -a {params.ctl}'
#		' -cl \'glouvel:200\''
#		' -m "`~glouvel/scripts/codeml/allocate_codeml_memory.py {input}`"'


# It's better to submit all jobs through one single file.
# However in that case don't forget to specify concurrency_limits
rule condor_descript_all:
	input:
		ctl=expand("{genetree}/subtrees/{ancestor}{genetree}.{suffix}.ctl", genetree=GENETREES, ancestor=ANCESTORS)
	output: "{basename}.condor.txt"
	params: template=expand("condor_logs/subtrees/{genetree}/{ancestor}{genetree}.{suffix}.condor", genetree=GENETREES)
	shell:
		'/users/ldog/glouvel/scripts/htcondor_descript/condor_descript.py'
		' {output}'
		' /users/ldog/glouvel/scripts/codeml/run_codeml_separatedir.sh'
		' --dir condor_logs'
		' --template {params.template}'
		' -a {input.ctl}'
		' -cl \'glouvel:34\''
		' -m "50M"'

rule codeml_condor_all:
	input: rules.condor_descript_all.output
	output: "{basename}.condor.jobsubmitted.txt"
	shell: "condor_submit {input} | tee {output}"

rule codeml_condor:
	input:
		desc=rules.condor_descript.output,
		ctl =rules.make_ctl.output,
		seq =rules.fasta2phylip.output,
		tree=rules.rm_leaves_not_in_al.output
	output: "{genetree}/{genetree}.condor.jobsubmitted.txt"
		#"{genetree}.condor_{}.stdout",
		#"{genetree}.condor_{}.log"
		#rules.codeml.output # Output must appear in less than 5sec
	shell:
		"condor_submit {input.desc} | tee {output}"

