#configfile: "codeml1-300.snake.config.yaml"
import sys
import re
import os.path
from glob import iglob
import bz2

ruleorder: codeml_condor > codeml

wildcard_constraints:
	ancestorgenetreesuffix='[A-Z][A-Za-z_.-]+ENSGT00\d+[.`a-zA-Z0-9-]*'
#	genetree = 'ENSGT\d+',#,
#	suffix = '[a-zA-Z.]+'
#	#bz2_or_not = "|\.bz2"

GENETREES = config.setdefault('genetrees', ['ENSGT00850000133333'])
#ANCESTORS = config.setdefault('ancestors',
#                              ['Afrotheria',
#                               'Carnivora',
#                               'Cetartiodactyla',
#                               'Chiroptera',
#                               'Euarchontoglires',
#                               'Insectivora',
#                               'Lagomorpha',
#                               'Marsupialia',
#                               'Neognathae',
#                               'Rodentia',
#                               'Simiiformes',
#                               'Strepsirrhini',
#                               'Xenarthra'])
# in get_subtrees_ancestor_pre, do you want to include files where a .mlc exists?

SUBTREEDIR = config.setdefault('subtreedir', 'subtrees')
#BASE_CTL = config.setdefault('base_ctl', 'base0.ctl')
REDO = config.setdefault('redo', False)
if isinstance(REDO, str) and REDO.lower() in ('true', 'false', '1', '0'):
	REDO = True if REDO.lower() in ('true' ,'1') else False
elif isinstance(REDO, int):
	REDO = bool(REDO)
else:
	print("Error: config option 'redo' must be bool-like (True/False/1/0)",
			file=sys.stderr)
	sys.exit(1)

#rule one_subtree:
#    input: "{genetree}/{subtreedir}/{ancestorgenetreesuffix}_{model}.ctl"



#def get_subtrees(wildcards):
#	pattern = '{genetree}/%s/{ancestor}{genetree}*.nwk' % SUBTREEDIR
#	return iglob(pattern.format(**vars(wildcards)))
#
#def get_ctl_pre(wildcards):
#	return [f.replace('.nwk', '.ctl') for f in get_subtrees(wildcards)]

def get_subtrees_ancestor(wildcards):
	
	cachefile = '.cache_nwkfiles_{subtreedir}-{ancestor}.list.bz2'.format(**vars(wildcards))
	if os.path.exists(cachefile):
		print("Loading from cache %r" % cachefile, file=sys.stderr)
		with bz2.open(cachefile, 'rt', encoding='utf8') as cache:
			for line in cache:
				yield line.rstrip()
	else:
		mainpattern = '{{0}}/{subtreedir}/{ancestor}{{0}}*.nwk'.format(**vars(wildcards))

		print("Search on pattern: %r" % mainpattern, file=sys.stderr)
		patterns = [mainpattern.format(genetree) for genetree in GENETREES]
		#discarded = 0
		#discarded_codeml = 0
		#total_genetrees = len(GENETREES)
		#fmt_progress = '\r[progress: %5d/' + str(total_genetrees) + ' (%.2f)]'
		
		with bz2.open(cachefile, 'wt', encoding='utf8') as cache:
			for processed_genetrees, pattern in enumerate(patterns, start=1):
				#percentage = float(processed_genetrees) / total_genetrees * 100
				#print(fmt_progress % (processed_genetrees, percentage),
				#		end=' ', file=sys.stderr)
				stricter_pattern = re.compile(pattern.replace('*', '([.`a-zA-Z])*'))
				for f in iglob(pattern):
					if stricter_pattern.match(f):
						yield f
						cache.write(f + '\n')
		#print(file=sys.stderr)
				#else:
				#	discarded += 1
				#	if re.search(r'_codeml', f):
				#		discarded_codeml += 1
				#	else:
				#		print(f, end=',', file=sys.stderr)
		#print("Discarded: %d (codeml: %d). " % (discarded, discarded_codeml),
		#	  end=' ', file=sys.stderr)

def get_ctl_ancestor_pre(wildcards):
	print("get_ctl_ancestor_pre...", file=sys.stderr)
	# Do not yield if there is a codeml result file already
	#r = [f.replace('.nwk', '.ctl') for f in get_subtrees_ancestor(wildcards) \
	#		if not os.path.isfile(f.replace('.nwk', '.mlc'))]
	#print("Done (%d files)." % len(r), file=sys.stderr)
	r = []
	count = 0
	for count, f in enumerate(get_subtrees_ancestor(wildcards), start=1):
		expected_mlc = f.replace('.nwk', '_%s.mlc' % wildcards.model)
		if REDO or not os.path.isfile(expected_mlc):
			expected_ctl = f.replace('.nwk', '_%s.ctl' % wildcards.model)
			r.append(expected_ctl)
	todo = len(r)
	print("To include: %d ; already done: %d files." % (todo, count-todo),
			file=sys.stderr)
	print("\n".join(r[:5] + ['...']), file=sys.stderr)
	return r

def get_ctl_ancestor(wildcards):
	print("get_ctl_ancestor (OLD VERSION)...", file=sys.stderr)
	patterns = ['{0}/{subtreedir}/{ancestor}{0}*.ctl'.format(genetree,
													**vars(wildcards)) \
				for genetree in GENETREES]
	found = []
	for pattern in patterns:
		found += glob(pattern)
	return found

#rule all:
#	input: "codeml.condor.txt"

# prepare multiple alignment. Once for each gene tree.
rule prot2gene_in_align:
	input:  "{genetree}.fa.bz2"
	output: "{genetree}/{genetree}_genes.fa"
	shell:
		"~glouvel/scripts/prot2gene.py"
		" --cgene 1 --cprot 2 --force-overwrite"
		" -o '{{0}}/{{0}}_genes.fa'"
		" ~glouvel/ws2/DUPLI_data85/gene_info/%s_fromtree.tsv"
		" {input}"
		# Single quotes are important for shell escaping the braces!

# prepare trees
rule get_tree:
	input: "/users/ldog/alouis/ws2/GENOMICUS_SVN/data85/trees/0.35/tree.4F.cut.bz2"
	output: "{genetree}/{genetree}.nwk"
	shell:
		"~glouvel/install/python2.7/localrepo/ToolsDyogen/treeTools/ALL.extractOneGeneTree.py \
    -field=family_name \
    -toNewick=True \
    -withAncSpeciesNames=True \
    {input} \
    {wildcards.genetree} \
    > {output}"


#rule prune2family:
#	input: rules.get_tree.output
#	output: expand("{{genetree}}/%s/" % SUBTREEDIR)
#	shell:
#		"~glouvel/scripts/codeml/prune2family.py -o #TODO"


# The actual starting rule
rule list_tree_labels:
	input: "{genetree}/{subtreedir}/{ancestorgenetreesuffix}.nwk"
	output: temp("{genetree}/{subtreedir}/{ancestorgenetreesuffix}_labels.txt")
	# the perl part removes the last newline of stdin. (Otherwise
	# evosite3d/extract_sequences.py fails if there are no labels)
	shell: "nw_labels -I '{input}' | perl -pe 'chomp if eof' > '{output}'"

rule reshape_tree:
	# /!\ Cyclic rule!
	# nw_topology -bI: remove inner node labels (but keep branch lengths)
	# nw_clade: remove nodes with one child at the root.
	input: "{genetree}/{subtreedir}/{ancestorgenetreesuffix}.nwk"
		#tree="{genetree}/{subtreedir}/{ancestorgenetreesuffix}.nwk",
		#labels=rules.list_tree_labels.output
	output: "{genetree}/{subtreedir}/{ancestorgenetreesuffix}_codeml.nwk"
	shell:
		"~glouvel/scripts/codeml/reshape_tree.py '{input}' '{output}'"

rule rm_seq_not_in_tree:
	input:
		labels=rules.list_tree_labels.output,  #"{genetree}_labels.txt",
		al    =rules.prot2gene_in_align.output #"{genetree}_genes.fa"
	output: "{genetree}/{subtreedir}/{ancestorgenetreesuffix}_genes.fa"
	shell:
		"~glouvel/scripts/evosite3d/extract_sequences.py '{input.labels}' "\
		"'{input.al}' > '{output}'"

rule fasta2phylip:
	input:  rules.rm_seq_not_in_tree.output #"{ancestorgenetreesuffix}_genes.fa"
	output: "{genetree}/{subtreedir}/{ancestorgenetreesuffix}_genes.phy"
	shell:
		"/users/ldog/glouvel/scripts/evosite3d/convert_fasta2phylip.py "\
		"'{input}' '{output}'"

rule make_ctl:
	input:
		#ctl="base0.ctl",
		ctl="ctl/{model}.ctl",
		phy=rules.fasta2phylip.output,
		tree=rules.reshape_tree.output
	output: "{genetree}/{subtreedir}/{ancestorgenetreesuffix}_{model}.ctl"
	run:
		with open(output[0], 'w') as out:
			# Write paths relatively to the directory of the .ctl file!
			out.write(
				("seqfile  = {ancestorgenetreesuffix}_genes.phy\n"
				 "treefile = {ancestorgenetreesuffix}_codeml.nwk\n"
				 "outfile  = {ancestorgenetreesuffix}_{model}.mlc\n").format(**vars(wildcards)))
			with open(input.ctl) as IN:
				out.write(IN.read())

rule codeml:
	input:
		ctl =rules.make_ctl.output,
		seq =rules.fasta2phylip.output,
		tree=rules.reshape_tree.output
	output:
		mlc  ="{genetree}/{subtreedir}/{ancestorgenetreesuffix}_{model}.mlc",
		dN   ="{genetree}/{subtreedir}/{ancestorgenetreesuffix}_{model}_2NG.dN",
		dS   ="{genetree}/{subtreedir}/{ancestorgenetreesuffix}_{model}_2NG.dS",
		t    ="{genetree}/{subtreedir}/{ancestorgenetreesuffix}_{model}_2NG.t",
		ffold="{genetree}/{subtreedir}/{ancestorgenetreesuffix}_{model}_4fold.nuc",
		lnf  ="{genetree}/{subtreedir}/{ancestorgenetreesuffix}_{model}_lnf",
		rst  ="{genetree}/{subtreedir}/{ancestorgenetreesuffix}_{model}_rst",
		rst1 ="{genetree}/{subtreedir}/{ancestorgenetreesuffix}_{model}_rst1",
		rub  ="{genetree}/{subtreedir}/{ancestorgenetreesuffix}_{model}_rub"
	log: "{genetree}/{subtreedir}/{ancestorgenetreesuffix}_{model}.log"
	shell:
		"bash ~glouvel/scripts/codeml/run_codeml_separatedir.sh '{input.ctl}'"

#rule allocate_codeml_memory:
#	input: rules.fasta2phylip.output
#	output: "{genetree}/{subtreedir}/{ancestor}{genetree}.condor.memory.txt"
#		#temp("{genetree}/{genetree}.condor.memory.txt")
#	shell: "~glouvel/scripts/codeml/allocate_codeml_memory.py {input} > {output}"
		
rule condor_descript:
	#input: rules.allocate_codeml_memory.output
	output: "{genetree}/{subtreedir}/{ancestorgenetreesuffix}_{model}.condor.txt"
	params: ctl="{genetree}/{subtreedir}/{ancestorgenetreesuffix}_{model}.ctl"
	shell:
		'/users/ldog/glouvel/scripts/fluidcondor/condor_descript.py'
		' {output}'
		' /users/ldog/glouvel/scripts/codeml/run_codeml_separatedir.sh'
		' -a {params.ctl}'
		' -cl \'glouvel:125\''
		' -m 1G'

# Check that all the .ctl corresponding to the .nwk have been produced.
#rule all_ready_for_codeml:
	

rule condor_descript_prepare:
	#input: expand('{genetree}/{{subtreedir}}/all_ready_for_codeml', genetree=GENETREES)
	#params: get_ctl_ancestor # _pre required otherwise it won't compute
							# the .ctl if they don't exist yet.
			#expand('{genetree}/%s/{{ancestor}}{genetree}*.nwk' % SUBTREEDIR,
			#	  genetree=GENETREES)
	input: get_ctl_ancestor_pre  # outputs of `make_ctl`
	output: "{basename}_{ancestor}_{model}.{subtreedir}.condor.arguments.txt"
	run:
		with open(output[0], 'w') as OUT:
			OUT.write("template\targuments\n")
			for ctlfile in input:
				base, _ = os.path.splitext(os.path.basename(ctlfile))
				tmpl = 'condor_logs/%s_%s/%s' % (wildcards.ancestor,
												 wildcards.subtreedir,
												 base)
				OUT.write('%s\t-q %s\n' % (tmpl, ctlfile))


# It's better to submit all jobs through one single file.
# However in that case don't forget to specify concurrency_limits
rule condor_descript_all:
	input: rules.condor_descript_prepare.output
	output: "{basename}_{ancestor}_{model}.{subtreedir}.condor.txt"
	shell:
		'/users/ldog/glouvel/scripts/fluidcondor/condor_descript.py'
		' {output}'
		' /users/ldog/glouvel/scripts/codeml/run_codeml_separatedir.sh'
		' --fromfile {input}'
		' -cl \'glouvel:125\''
		' -m "1G"'
		' -ni True'

rule codeml_condor_all:
	input: rules.condor_descript_all.output
	output: "{basename}.condor.jobsubmitted.txt"
	shell: "condor_submit {input} | tee {output}"

rule codeml_condor:
	input:
		desc=rules.condor_descript.output,
		ctl =rules.make_ctl.output,
		seq =rules.fasta2phylip.output,
		tree="{genetree}/%s/{ancestorgenetreesuffix}.nwk" % SUBTREEDIR
	output: "{genetree}/{genetree}.condor.jobsubmitted.txt"
	shell:
		"condor_submit {input.desc} | tee {output}"

